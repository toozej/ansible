---
- name: get latest {{ repo }} version
  uri:
    url: "{{ project_url }}/{{ version }}"
    return_content: true
  register: latest_version

- name: setup temp directory
  tempfile:
    state: directory
    suffix: dwnld
  register: tempfolder_results
  when: (base_playbook is not defined) or (base_playbook is defined and base_playbook != "test.yml")

- name: set fact for temp directory
  set_fact:
    tempfolder: "{{ tempfolder_results }}"
  when: (base_playbook is not defined) or (base_playbook is defined and base_playbook != "test.yml") and (tempfolder_results is defined)

- name: setup temp directory for GitHub Actions only
  tempfile:
    state: directory
    path: "{{ lookup('env', 'RUNNER_TEMP') | default('/home/runner/work/ansible/ansible/ansible/', True) }}"
    suffix: dwnld
  register: tempfolder_results
  when: (base_playbook is defined) and (base_playbook == "test.yml")

- name: set fact for temp directory for GitHub Actions only
  set_fact:
    tempfolder: "{{ tempfolder_results }}"
  when: (base_playbook is defined) and (base_playbook == "test.yml") and (tempfolder_results is defined)

- name: download latest version to specific install path
  block:
    - name: "check if {{ instpath }} exists"
      file:
        path: "{{ instpath }}"
        state: directory
        mode: '0755'

    - name: "downloading {{ repo }} {{ latest_version.json.tag_name }} binary"
      loop: "{{ latest_version.json.assets }}"
      loop_control:
        label: "{{ item.name }}"
      when: |
        (filename|string in item.name) and (arch|string in item.name) and
        (".zip" not in item.name and ".tar" not in item.name and ".7z" not in item.name and ".rar" not in item.name and ".sha" not in item.name) and
        ("darwin" not in item.name and "win" not in item.name and "bsd" not in item.name)
      get_url:
        url: "{{ item.browser_download_url }}"
        dest: "{{ tempfolder.path }}/{{ repo }}"

    - name: "downloading and extracting {{ repo }} {{ latest_version.json.tag_name }} binary"
      # idea from: https://stackoverflow.com/a/62672308/886659
      loop: "{{ latest_version.json.assets }}"
      loop_control:
        label: "{{ item.name }}"
      when: |
        (filename|string in item.name) and (arch|string in item.name) and
        (".zip" in item.name or ".tar" in item.name or ".7z" in item.name or ".rar" in item.name) and
        ("darwin" not in item.name and "win" not in item.name and "bsd" not in item.name)
      unarchive:
        remote_src: true
        src: "{{ item.browser_download_url }}"
        dest: "{{ tempfolder.path }}"
        keep_newer: true
        extra_opts:
          - --strip=1
          - --no-anchored
          - "{{ repo }}"

    - name: "installing {{ repo }} {{ latest_version.json.tag_name }} binary"
      command: |
        mv "{{ tempfolder.path }}/{{ repo }}" "{{ instpath }}{{ repo }}"
        chmod ug+x "{{ instpath }}{{ repo }}"
      args:
        creates: "{{ instpath }}{{ repo }}"
      when: final_filename is not defined

    - name: "installing {{ final_filename }} {{ latest_version.json.tag_name }} binary"
      command: |
        mv "{{ tempfolder.path }}/{{ repo }}" "{{ instpath }}{{ final_filename }}"
        chmod ugo+x "{{ instpath }}{{ final_filename }}"
      args:
        creates: "{{ instpath }}{{ final_filename }}"
      when: final_filename is defined
  when: instpath is defined

- name: apt | download latest version and install with package manager
  block:
    - name: "download deb package {{ repo }} {{ latest_version.json.tag_name }}"
      # idea from: https://stackoverflow.com/a/62672308/886659
      get_url:
        url: "{{ item.browser_download_url }}"
        dest: "{{ tempfolder.path }}/{{ filename }}.deb"
        force: true
      loop: "{{ latest_version.json.assets }}"
      loop_control:
        label: "{{ item.name }}"
      when: (filename|string in item.name) and (arch|string in item.name) and ('.deb' in item.name) and (distro is not defined)

    - name: "download deb package {{ repo }} {{ latest_version.json.tag_name }} for distro {{ distro }}"
      # idea from: https://stackoverflow.com/a/62672308/886659
      get_url:
        url: "{{ item.browser_download_url }}"
        dest: "{{ tempfolder.path }}/{{ filename }}.deb"
        force: true
      loop: "{{ latest_version.json.assets }}"
      loop_control:
        label: "{{ item.name }}"
      when: (filename|string in item.name) and (arch|string in item.name) and ('.deb' in item.name) and (distro is defined and distro|string in item.name)

    - name: "installing deb {{ repo }} {{ latest_version.json.tag_name }}"
      apt:
        deb: "{{ tempfolder.path }}/{{ filename }}.deb"
  when: (instpath is not defined) and (ansible_pkg_mgr == 'apt')

- name: dnf | download latest version and install with package manager
  block:
    - name: "download rpm package {{ repo }} {{ latest_version.json.tag_name }}"
      # idea from: https://stackoverflow.com/a/62672308/886659
      get_url:
        url: "{{ item.browser_download_url }}"
        dest: "{{ tempfolder.path }}/{{ filename }}.rpm"
        force: true
      loop: "{{ latest_version.json.assets }}"
      loop_control:
        label: "{{ item.name }}"
      when: (filename|string in item.name) and (arch|string in item.name) and ('.rpm' in item.name) and (distro is not defined)
    
    - name: "download rpm package {{ repo }} {{ latest_version.json.tag_name }} for distro {{ distro }}"
      # idea from: https://stackoverflow.com/a/62672308/886659
      get_url:
        url: "{{ item.browser_download_url }}"
        dest: "{{ tempfolder.path }}/{{ filename }}.rpm"
        force: true
      loop: "{{ latest_version.json.assets }}"
      loop_control:
        label: "{{ item.name }}"
      when: (filename|string in item.name) and (arch|string in item.name) and ('.rpm' in item.name) and (distro is defined and distro|string in item.name)

    - name: "installing rpm {{ repo }} {{ latest_version.json.tag_name }}"
      dnf:
        name: "{{ tempfolder.path }}/{{ filename }}.rpm"
        state: present
        disable_gpg_check: true
  when: (instpath is not defined) and (ansible_pkg_mgr == 'dnf')
  always:
    - name: delete {{ tempfolder.path|default("tempfolder") }}
      file:
        path: "{{ tempfolder.path }}"
        state: absent
      when: tempfolder.path is defined
      ignore_errors: true
